from utils.string_extension import safe_intclass Pagination:    page_size = 20    max_page_size = 100    page_size_query_param = 'page_size'    page_query_param = 'page'    def _positive_int(self,integer_string, strict=False, cutoff=None):        """        Cast a string to a strictly positive integer.        """        ret = int(integer_string)        if ret < 0 or (ret == 0 and strict):            raise ValueError()        if cutoff:            return min(ret, cutoff)        return ret    def get_page_size(self,request):        try:            if self.page_size_query_param:                return self._positive_int(                    request.query_params_format[self.page_size_query_param],                    strict=True,                    cutoff=self.max_page_size                )        except (KeyError, ValueError):                pass        return self.page_size    def get_paginated(self,data, request):        page_size = 10        page = 1        if hasattr(request, 'query_params_format'):            if request.query_params_format.get("page_size"):                page_size = safe_int(request.query_params_format.get("page_size",10))            if request.query_params_format.get("page"):                page = safe_int(request.query_params_format.get("page",1))        handler_data = data        if isinstance(handler_data,dict) and 'data' in handler_data:            handler_data = handler_data.get('data')        elif isinstance(handler_data,list):            handler_data = handler_data        handler_data_old=handler_data        page_start = page_size * page - page_size        page_end = page_size * page        handler_data = handler_data[page_start:page_end]        headers = {            'Total': len(handler_data_old),            'X-Content-Range': "%d-%d" % (page_start, page_end)        }        if isinstance(data, dict) and 'data' in data:            data['data'] = handler_data            handler_data = data        return {'data':handler_data,'header':headers}